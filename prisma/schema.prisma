// This is the Prisma schema for the Semantic-Logic AI Workflow Builder backend
// Updated to work with Supabase PostgreSQL

generator client {
  provider = "prisma-client-js"
  output   = "../server/node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User represents a registered user of the platform
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  workflows     Workflow[]
  apiKeys       ApiKey[]
  providerConfigs ProviderConfig[]
}

model ProviderConfig {
  id          String   @id @default(cuid())
  userId      String
  providerId  String
  name         String
  baseURL      String
  models       Json
  isActive     Boolean  @default(true)
  headers      Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, providerId])
  @@index([userId])
}

// Workflow represents a complete semantic logic workflow
model Workflow {
  id            String    @id @default(cuid())
  title         String
  description   String?
  content       Json      // Store the full workflow JSON (nodes, edges, viewport)
  version       String    // Schema version 
  isPublic      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  executions    WorkflowExecution[]
  configs       WorkflowConfig[]
  forkCount     Int       @default(0)
  starCount     Int       @default(0)
  tags          String[]  // Array of tags for searching

  @@index([userId])
  @@index([isPublic])
  @@index([createdAt])
}

// WorkflowConfig represents configuration for executing a workflow
model WorkflowConfig {
  id            String    @id @default(uuid())
  name          String
  model         String    // AI model identifier (e.g., "gpt-4o")
  parameters    Json      // Store model parameters (temperature, maxTokens, etc.)
  systemPrompt  String    @db.Text
  isDefault     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  workflowId    String
  workflow      Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  executions    WorkflowExecution[]

  @@index([workflowId])
}

// WorkflowExecution represents a single run of a workflow
model WorkflowExecution {
  id            String    @id @default(uuid())
  state         String    // PENDING, RUNNING, COMPLETED, FAILED, PAUSED
  results       Json?     // Store execution results
  errors        Json?     // Store execution errors
  tokenUsage    Json?     // Store token usage statistics
  startedAt     DateTime  @default(now())
  completedAt   DateTime?
  workflowId    String
  workflow      Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  configId      String
  config        WorkflowConfig @relation(fields: [configId], references: [id])
  nodeExecutions NodeExecution[]

  @@index([workflowId])
  @@index([configId])
  @@index([state])
  @@index([startedAt])
}

// NodeExecution represents execution of an individual node
model NodeExecution {
  id               String    @id @default(cuid())
  nodeId           String    // Original node ID from workflow
  type             String    // Node type from ontology (e.g., "PROP-STM")
  input            String?   @db.Text
  output           String?   @db.Text
  state            String    // PENDING, RUNNING, COMPLETED, FAILED
  duration         Int?      // Execution time in milliseconds
  tokenUsage       Json?     // Prompt, completion, total tokens
  executionId      String
  workflowExecution WorkflowExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)
  createdAt        DateTime  @default(now())
  completedAt      DateTime?

  @@index([executionId])
}

// ApiKey for external access
model ApiKey {
  id        String   @id @default(cuid())
  key         String @unique
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
  permissions String[] // e.g., ["workflow:read", "workflow:execute"]

  @@index([userId])
}
